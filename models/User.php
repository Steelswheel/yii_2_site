<?php
namespace app\models;


use Yii;
use yii\base\NotSupportedException;
use app\admin\components\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\web\IdentityInterface;

/**
 * User model
 *
 * @property integer $id
 * @property string $username
 * @property string $name
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $auth_key
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 * @property string $password write-only password
 */
class User extends ActiveRecord implements IdentityInterface
{
    const STATUS_DELETED = 0;
    const STATUS_ACTIVE = 10;

    public $pass = '';

    public $img;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'user';
    }

    public function beforeSave($insert)
    {

        if ($this->pass != ''){
            $this->setPassword($this->pass);
        }

        if ($insert){
            $this->generateAuthKey();
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub

    }


    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }





    public function afterSave($insert, $changedAttributes)
    {

       /* Yii::$app->authManager->revokeAll( $this->id);
        if ($this->role){
            foreach (explode(',',$this->role) as $itemRole){
                $userRole = \Yii::$app->authManager->getRole($itemRole);
                Yii::$app->authManager->assign($userRole, $this->id);
            }
        }*/



        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub


    }




    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['role_format'],'safe'],
           //  [['img'],'file','skipOnEmpty' => true,'extensions' => 'png, jpg','maxFiles' => 5],
            [['username'],'unique'],
            [['status'],'required'],
            [['name','pass','username'],'string'],
            ['status', 'default', 'value' => self::STATUS_ACTIVE],
            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_DELETED]],
        ];
    }

    public function getRoleId(){
        $status = $this->enumerationRole;
        return $status[$this->role];

    }
    public function getStatusId(){
        $status = $this->enumerationStatus;
        return $status[$this->status];

    }



    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE]);
    }

    public function getId()
    {
        return $this->getPrimaryKey();
    }

    public function getAuthKey()
    {
        return $this->auth_key;
    }

    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

    public function setPassword($password)
    {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }


    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }


    /* ********************* */

    public function getEnumerationRole_format(){
        $rules = \Yii::$app->authManager->getRoles();
        $enum = [];
        foreach ($rules as $item)
            $enum[] = [
                'id' => $item->name,
                'label' => $item->description
            ];
        return $enum;
    }

    public function getEnumerationStatus(){
        return [
            ['id' => 0, 'label' => 'Удален'],
            ['id' => 10, 'label' => 'Активен'],
        ];
    }


    public static function listUsers(){

        $model = User::find()->orderBy('username')->all();

        return array_map(function($i){
            return [
                'id' => $i['id'],
                'label' => $i['username']
            ];
        },$model);

    }





    public function attributeLabels()
    {
        return [
            'username' => 'Username',
            'name' => 'Имя',
            'pass' => 'Пароль',
            'role' => 'Роль',
            'role_format' => 'Роль',
            'roleId' => 'Роль',
            'status' => 'Статус',
            'statusId' => 'Статус',
            'img' => 'Картинка'
        ];
    }


    public function fields(){
        return [
            'id',
            'username',
            'name',
            'role',
            'role_format',
            'status',
            'pass',

            'created_at',
            'updated_at',
        ];
    }


}
